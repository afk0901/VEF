<?php
namespace File; 


echo'<!DOCTYPE>
<html>
<head>
    <meta charset="utf-8">
    
</head>
</html>';

class Upload {

    


    protected $uploaded = [];   
    protected $destination;     
    protected $max = 2048200;  # Það sem má uploada í bytes(2MB)
    protected $messages = [];
    protected $permitted = [  
        'image/gif',
        'image/jpeg',
        'image/pjpeg',
        'text/plain',
        'image/png'
    ];

protected $notTrusted = ['bin', 'cgi', 'exe', 'js', 'pl', 'php', 'py', 'sh'];
protected $suffix = '.untrustedupload';
protected $newName;
protected $renameDuplicates;
protected $Specialchar = false;

 
    # Þegar þú býrð til tilvik af class, þá er fyrst kallað á smiðinn
    # Smiður, nota tvær undirlínur saman + orðið construct, þarf að vera public þ.e. aðgengilegur utan class
    # parameter $path geymir slóðin að upload möppu, sem  er sett í protected breytuna $destination
    public function __construct($path) {
         
        # athuga hvort dir sé valid og skrifanlegt, ef ekki þá villumelding
        if (!is_dir($path) || !is_writable($path)) {

            # The backslash in front of Exception indicates that a core PHP command is to be used rather than one defined within the namespace (class)
            throw new \Exception("$path must be a valid, writable directory.");
        }
        # Ef slóð er í lagi þá er hún færð í breytu, $this-> refers to the current object
        $this->destination = $path;     # við vísum í breytu/property með breytuheiti, en sleppum $ 
        
        # núna á t.d. tilvikið  $loader sem við bjuggum til í index.php property, $destination með slóð að upload möppu
        # Við getum samt ekki gert $loader->destination til að sjá slóð í index.php þar sem hún er protected (ekki public)
    }

    public function upload($renameDuplicates) {
 $this->renameDuplicates = $renameDuplicates;
 $uploaded = current($_FILES);  

//Ef að $uploaded['name'] er array þá eru margar skrár.
if (is_array($uploaded['name'])) {

    //Hérna nýtum við okkur keyið í $uploaded['name'] sem heldur utan um nöfnin á skráunum. Það er multidemensional array þegar margar skrár.
    foreach ($uploaded['name'] as $key => $value) {//Lúppast í gegnum 0,2,1,3 o.s.f.v fer eftir fjölda skráa.
        $currentfile['name'] = $uploaded['name'][$key];
        $currentfile['type'] = $uploaded['type'][$key];
        $currentfile['tmp_name'] = $uploaded['tmp_name'][$key];
        $currentfile['error'] = $uploaded['error'][$key];
        $currentfile['size'] = $uploaded['size'][$key];
        //Keyrir checkFile á $currentfile.
        if ($this->checkFile($currentfile)) {
            $this->moveFile($currentfile);
        }
    }

 }

 else{
//Ef þetta er bara ein skrá
 if ($this->checkFile($uploaded)) {
 $this->moveFile($uploaded);
 }
}
 }

 
    # Public properties can be accessed—and changed—outside the class definition. 
    # Protecting $messages ensures that the contents of the array cannot be altered, so you know the message has been generated by the class. 
    public function getMessages() {
        return $this->messages;
    }


   # method sem er kallað á aðeins innan class (protected), frá upload()
    # Tómt, eftir að útfæra, sjá PHP Solution 6-3 
    protected function checkFile($file) {
        $accept = true;

        if($file['error'] != 0){//Ef að eitthvað misheppnaðist s.s. error
        //kóðinn er ekki 0 þá ætlum við að
        //kalle í geterrorMessage.
         $this->geterrorMessage($file);
        

        if($file['error'] == 4){//Ef að það var ekki nein skrá send inn
            return false;

        }

        else{
            $accept = false;
        }
    }
    
    if(!$this->checksize($file)){
        $accept = false;
    }
    
    if(!$this->checkType($file)){
        $accept = false;
    }

        if (!$this->checkType($file)) {
            return false;
        }
    

    if ($accept) {
        $this->checkName($file);
    }
        return $accept;
    }


   
//Hér eru skilaboð send inn í property sem er array til að notandi geti vitað hvað var að. Notar error kóðan sem kemur í
    //$_FILE['error']
    protected function getErrorMessage($file){
        switch ($file['error']) {

            case 3:
               $this->messages[] = $file['name'] ."var ekki alveg upploduð eða skemmd";
            break;

            case 4:
                $this->messages[] = $file['name']  ."Ekkert skrárheiti valið";
        break;
            default:
                $this->messages[] = "Afsakið, einhverra hluta vegna tókst ekki að uploda ".
                $file['name'];
                break;
        }
    }

    protected function checksize($file){

        if($file['error'] == 1 || $file['error'] == 2){
            return false;

        }

        elseif ($file['size'] == 0){
            $this->messages[] = $file['name'] ." er tóm, hún var ekki uploduð.";
            return false;

        }

        elseif ($file['size'] > $this->max){
           $this->messages[] = $file['name']. "er yfir leyfilegri stærð. Leyfileg stærð er að hámarki ".$this->getMaxSize($file);
        }
         else{
            return true;
         }
    }

    protected function checkType($file){
        if (in_array($file['type'], $this->permitted)) {
            return true;
        }

        else{
            
            $this->messages[] = $file['name'] ."er ekki á leyfilegu skráarsniði.". "  File type: ".$file['type'];
            return false;
        }
    }

    public function getmaxsize($file){
        return number_format($this->max/1024,1) . 'KB';
    }
    # move() til að fá aðgang að skráarupplýsingum og færa þau í upload möppuna á server
    # Til að fá aðgang að skrám í $_FILES þá þarf að vita name attribute í input reit notandans.  
    # Við vitum það ekki fyrirfram (breytilegt eftir input reitum).
    # Þurfum falls sem er sveigjanlegt/almennara/fjölnota. 
    # move() þarf að keyra þeagr búið er að smella á submit.

    
    # method sem er kallað á aðeins innan class (protected)
    protected function moveFile($file) {

     $filename = isset($this->newName) ? $this->newName : $file['name'];
     
 $success = move_uploaded_file($file['tmp_name'],
 $this->destination . $filename);
        
        # stýrum hvaða skilaboð eru notuð í messages[]
        # $_message er proctected og þarf því á public  getMessages aðferð að halda svo sé hægt að ná í skilaboðin í fylkinu.
        if ($success && $this->Specialchar == false) {
            $result = $file['name'] .' ('.round($file['size'] / 1024.1,2).' MB) ' .$file['type']. ' var uploduð';
            
            if (!is_null($this->newName)) {
                $result .= ', og var endurnefnd '.$this->newName;
                
            }

            $this->messages[] = $result;
        }

       
         else {
            $this->messages[] = 'Gat ekki uplodað ' . $filename;
        }

    }

    protected function checkName($file) {
//$this->newName = null;
if ($this->renameDuplicates) {
   
   $name = isset($this->newName) ? $this->newName : $file['name'];
   $basename = pathinfo($name, PATHINFO_FILENAME);
   $extension = pathinfo($name, PATHINFO_EXTENSION);

 $existing = scandir($this->destination);

 if (in_array($name, $existing)) {
 // rename file

 $basename = str_replace(' ', '_', $basename);
 //Fyrst finn ég öll bil og set _ í staðinn fyrir þau.
 // $basename = preg_replace("/[^a-zA-Z0-9._]/", '', $name);



 $i = 1;
 //endurskýrir skrár sem hafa sama nafnið og tekur í burtu bil og sértákn.
 do {
 $this->newName = $basename . '_' . $i++;

 if (!empty($extension)) {
              
 $this->newName .= ".$extension";
 }

 

 } while (in_array($this->newName, $existing));


if(preg_match("/[\W]+/", $basename)){
       $this->Specialchar = true;
       echo "Ekki má hafa sérstafi í skráarheiti!";
  }

 }

if (!empty($this->suffix)) {
    
    if (in_array($extension,$this->notTrusted) || empty($extension)) {
        $this->newName = $basename.$this->suffix;
    }
}

}
}

}